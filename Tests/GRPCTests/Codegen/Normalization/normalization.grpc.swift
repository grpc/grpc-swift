//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: normalization.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Normalization_NormalizationClient`, then call methods of this protocol to make API calls.
internal protocol Normalization_NormalizationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? { get }

  func Unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func ServerStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func serverStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func ClientStreaming(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func clientStreaming(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func BidirectionalStreaming(
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func bidirectionalStreaming(
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>
}

extension Normalization_NormalizationClientProtocol {
  internal var serviceName: String {
    return "normalization.Normalization"
  }

  /// Unary call to Unary
  ///
  /// - Parameters:
  ///   - request: Request to send to Unary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func Unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeUnaryCall(
      path: "/normalization.Normalization/Unary",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnaryInterceptors() ?? []
    )
  }

  /// Unary call to unary
  ///
  /// - Parameters:
  ///   - request: Request to send to unary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeUnaryCall(
      path: "/normalization.Normalization/unary",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunaryInterceptors() ?? []
    )
  }

  /// Server streaming call to ServerStreaming
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerStreaming.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func ServerStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeServerStreamingCall(
      path: "/normalization.Normalization/ServerStreaming",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeServerStreamingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to serverStreaming
  ///
  /// - Parameters:
  ///   - request: Request to send to serverStreaming.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func serverStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeServerStreamingCall(
      path: "/normalization.Normalization/serverStreaming",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeserverStreamingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Client streaming call to ClientStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func ClientStreaming(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeClientStreamingCall(
      path: "/normalization.Normalization/ClientStreaming",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? []
    )
  }

  /// Client streaming call to clientStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func clientStreaming(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeClientStreamingCall(
      path: "/normalization.Normalization/clientStreaming",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to BidirectionalStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func BidirectionalStreaming(
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeBidirectionalStreamingCall(
      path: "/normalization.Normalization/BidirectionalStreaming",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Bidirectional streaming call to bidirectionalStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func bidirectionalStreaming(
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeBidirectionalStreamingCall(
      path: "/normalization.Normalization/bidirectionalStreaming",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Normalization_NormalizationClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'Unary'.
  func makeUnaryInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'unary'.
  func makeunaryInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'ServerStreaming'.
  func makeServerStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'serverStreaming'.
  func makeserverStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'ClientStreaming'.
  func makeClientStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'clientStreaming'.
  func makeclientStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'BidirectionalStreaming'.
  func makeBidirectionalStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'bidirectionalStreaming'.
  func makebidirectionalStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]
}

internal final class Normalization_NormalizationClient: Normalization_NormalizationClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol?

  /// Creates a client for the normalization.Normalization service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Normalization_NormalizationProvider: CallHandlerProvider {
  var interceptors: Normalization_NormalizationServerInterceptorFactoryProtocol? { get }

  func Unary(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Normalization_FunctionName>

  func unary(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Normalization_FunctionName>

  func ServerStreaming(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<GRPCStatus>

  func serverStreaming(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<GRPCStatus>

  func ClientStreaming(context: UnaryResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>

  func clientStreaming(context: UnaryResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>

  func BidirectionalStreaming(context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>

  func bidirectionalStreaming(context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>
}

extension Normalization_NormalizationProvider {
  internal var serviceName: Substring { return "normalization.Normalization" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Unary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeUnaryInterceptors() ?? [],
        userFunction: self.Unary(request:context:)
      )

    case "unary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeunaryInterceptors() ?? [],
        userFunction: self.unary(request:context:)
      )

    case "ServerStreaming":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeServerStreamingInterceptors() ?? [],
        userFunction: self.ServerStreaming(request:context:)
      )

    case "serverStreaming":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeserverStreamingInterceptors() ?? [],
        userFunction: self.serverStreaming(request:context:)
      )

    case "ClientStreaming":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? [],
        observerFactory: self.ClientStreaming(context:)
      )

    case "clientStreaming":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? [],
        observerFactory: self.clientStreaming(context:)
      )

    case "BidirectionalStreaming":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? [],
        observerFactory: self.BidirectionalStreaming(context:)
      )

    case "bidirectionalStreaming":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? [],
        observerFactory: self.bidirectionalStreaming(context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Normalization_NormalizationServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'Unary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnaryInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'unary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeunaryInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'ServerStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeServerStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'serverStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeserverStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'ClientStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'clientStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeclientStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'BidirectionalStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidirectionalStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'bidirectionalStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makebidirectionalStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]
}

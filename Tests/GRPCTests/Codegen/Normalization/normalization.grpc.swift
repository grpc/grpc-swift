//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: normalization.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Normalization_NormalizationClient`, then call methods of this protocol to make API calls.
internal protocol Normalization_NormalizationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? { get }

  func Unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func ServerStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func serverStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func ClientStreaming(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func clientStreaming(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func BidirectionalStreaming(
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func bidirectionalStreaming(
    callOptions: CallOptions?,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>
}

extension Normalization_NormalizationClientProtocol {
  internal var serviceName: String {
    return "normalization.Normalization"
  }

  /// Unary call to Unary
  ///
  /// - Parameters:
  ///   - request: Request to send to Unary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func Unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeUnaryCall(
      path: Normalization_NormalizationClientMetadata.Methods.Unary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnaryInterceptors() ?? []
    )
  }

  /// Unary call to unary
  ///
  /// - Parameters:
  ///   - request: Request to send to unary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeUnaryCall(
      path: Normalization_NormalizationClientMetadata.Methods.unary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunaryInterceptors() ?? []
    )
  }

  /// Server streaming call to ServerStreaming
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerStreaming.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func ServerStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeServerStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.ServerStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeServerStreamingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to serverStreaming
  ///
  /// - Parameters:
  ///   - request: Request to send to serverStreaming.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func serverStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeServerStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.serverStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeserverStreamingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Client streaming call to ClientStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func ClientStreaming(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.ClientStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? []
    )
  }

  /// Client streaming call to clientStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func clientStreaming(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.clientStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to BidirectionalStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func BidirectionalStreaming(
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.BidirectionalStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Bidirectional streaming call to bidirectionalStreaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func bidirectionalStreaming(
    callOptions: CallOptions? = nil,
    handler: @escaping (Normalization_FunctionName) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.bidirectionalStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Normalization_NormalizationClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Normalization_NormalizationNIOClient")
internal final class Normalization_NormalizationClient: Normalization_NormalizationClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the normalization.Normalization service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Normalization_NormalizationNIOClient: Normalization_NormalizationClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol?

  /// Creates a client for the normalization.Normalization service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Normalization_NormalizationAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? { get }

  func makeUnaryCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func makeunaryCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func makeServerStreamingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func makeserverStreamingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func makeClientStreamingCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func makeclientStreamingCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func makeBidirectionalStreamingCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>

  func makebidirectionalStreamingCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Normalization_NormalizationAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Normalization_NormalizationClientMetadata.serviceDescriptor
  }

  internal var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUnaryCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncUnaryCall(
      path: Normalization_NormalizationClientMetadata.Methods.Unary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnaryInterceptors() ?? []
    )
  }

  internal func makeunaryCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncUnaryCall(
      path: Normalization_NormalizationClientMetadata.Methods.unary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunaryInterceptors() ?? []
    )
  }

  internal func makeServerStreamingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncServerStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.ServerStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeServerStreamingInterceptors() ?? []
    )
  }

  internal func makeserverStreamingCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncServerStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.serverStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeserverStreamingInterceptors() ?? []
    )
  }

  internal func makeClientStreamingCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.ClientStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? []
    )
  }

  internal func makeclientStreamingCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.clientStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? []
    )
  }

  internal func makeBidirectionalStreamingCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.BidirectionalStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? []
    )
  }

  internal func makebidirectionalStreamingCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.bidirectionalStreaming.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Normalization_NormalizationAsyncClientProtocol {
  internal func Unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Normalization_FunctionName {
    return try await self.performAsyncUnaryCall(
      path: Normalization_NormalizationClientMetadata.Methods.Unary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnaryInterceptors() ?? []
    )
  }

  internal func unary(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Normalization_FunctionName {
    return try await self.performAsyncUnaryCall(
      path: Normalization_NormalizationClientMetadata.Methods.unary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunaryInterceptors() ?? []
    )
  }

  internal func ServerStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Normalization_FunctionName> {
    return self.performAsyncServerStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.ServerStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeServerStreamingInterceptors() ?? []
    )
  }

  internal func serverStreaming(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Normalization_FunctionName> {
    return self.performAsyncServerStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.serverStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeserverStreamingInterceptors() ?? []
    )
  }

  internal func ClientStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Normalization_FunctionName where RequestStream: Sequence, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.ClientStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? []
    )
  }

  internal func ClientStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Normalization_FunctionName where RequestStream: AsyncSequence & Sendable, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.ClientStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? []
    )
  }

  internal func clientStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Normalization_FunctionName where RequestStream: Sequence, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.clientStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? []
    )
  }

  internal func clientStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Normalization_FunctionName where RequestStream: AsyncSequence & Sendable, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncClientStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.clientStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? []
    )
  }

  internal func BidirectionalStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Normalization_FunctionName> where RequestStream: Sequence, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return self.performAsyncBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.BidirectionalStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? []
    )
  }

  internal func BidirectionalStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Normalization_FunctionName> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return self.performAsyncBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.BidirectionalStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? []
    )
  }

  internal func bidirectionalStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Normalization_FunctionName> where RequestStream: Sequence, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return self.performAsyncBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.bidirectionalStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? []
    )
  }

  internal func bidirectionalStreaming<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Normalization_FunctionName> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == SwiftProtobuf.Google_Protobuf_Empty {
    return self.performAsyncBidirectionalStreamingCall(
      path: Normalization_NormalizationClientMetadata.Methods.bidirectionalStreaming.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Normalization_NormalizationAsyncClient: Normalization_NormalizationAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Normalization_NormalizationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Normalization_NormalizationClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'Unary'.
  func makeUnaryInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'unary'.
  func makeunaryInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'ServerStreaming'.
  func makeServerStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'serverStreaming'.
  func makeserverStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'ClientStreaming'.
  func makeClientStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'clientStreaming'.
  func makeclientStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'BidirectionalStreaming'.
  func makeBidirectionalStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when invoking 'bidirectionalStreaming'.
  func makebidirectionalStreamingInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]
}

internal enum Normalization_NormalizationClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Normalization",
    fullName: "normalization.Normalization",
    methods: [
      Normalization_NormalizationClientMetadata.Methods.Unary,
      Normalization_NormalizationClientMetadata.Methods.unary,
      Normalization_NormalizationClientMetadata.Methods.ServerStreaming,
      Normalization_NormalizationClientMetadata.Methods.serverStreaming,
      Normalization_NormalizationClientMetadata.Methods.ClientStreaming,
      Normalization_NormalizationClientMetadata.Methods.clientStreaming,
      Normalization_NormalizationClientMetadata.Methods.BidirectionalStreaming,
      Normalization_NormalizationClientMetadata.Methods.bidirectionalStreaming,
    ]
  )

  internal enum Methods {
    internal static let Unary = GRPCMethodDescriptor(
      name: "Unary",
      path: "/normalization.Normalization/Unary",
      type: GRPCCallType.unary
    )

    internal static let unary = GRPCMethodDescriptor(
      name: "unary",
      path: "/normalization.Normalization/unary",
      type: GRPCCallType.unary
    )

    internal static let ServerStreaming = GRPCMethodDescriptor(
      name: "ServerStreaming",
      path: "/normalization.Normalization/ServerStreaming",
      type: GRPCCallType.serverStreaming
    )

    internal static let serverStreaming = GRPCMethodDescriptor(
      name: "serverStreaming",
      path: "/normalization.Normalization/serverStreaming",
      type: GRPCCallType.serverStreaming
    )

    internal static let ClientStreaming = GRPCMethodDescriptor(
      name: "ClientStreaming",
      path: "/normalization.Normalization/ClientStreaming",
      type: GRPCCallType.clientStreaming
    )

    internal static let clientStreaming = GRPCMethodDescriptor(
      name: "clientStreaming",
      path: "/normalization.Normalization/clientStreaming",
      type: GRPCCallType.clientStreaming
    )

    internal static let BidirectionalStreaming = GRPCMethodDescriptor(
      name: "BidirectionalStreaming",
      path: "/normalization.Normalization/BidirectionalStreaming",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let bidirectionalStreaming = GRPCMethodDescriptor(
      name: "bidirectionalStreaming",
      path: "/normalization.Normalization/bidirectionalStreaming",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Normalization_NormalizationProvider: CallHandlerProvider {
  var interceptors: Normalization_NormalizationServerInterceptorFactoryProtocol? { get }

  func Unary(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Normalization_FunctionName>

  func unary(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Normalization_FunctionName>

  func ServerStreaming(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<GRPCStatus>

  func serverStreaming(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<GRPCStatus>

  func ClientStreaming(context: UnaryResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>

  func clientStreaming(context: UnaryResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>

  func BidirectionalStreaming(context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>

  func bidirectionalStreaming(context: StreamingResponseCallContext<Normalization_FunctionName>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>
}

extension Normalization_NormalizationProvider {
  internal var serviceName: Substring {
    return Normalization_NormalizationServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Unary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeUnaryInterceptors() ?? [],
        userFunction: self.Unary(request:context:)
      )

    case "unary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeunaryInterceptors() ?? [],
        userFunction: self.unary(request:context:)
      )

    case "ServerStreaming":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeServerStreamingInterceptors() ?? [],
        userFunction: self.ServerStreaming(request:context:)
      )

    case "serverStreaming":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeserverStreamingInterceptors() ?? [],
        userFunction: self.serverStreaming(request:context:)
      )

    case "ClientStreaming":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? [],
        observerFactory: self.ClientStreaming(context:)
      )

    case "clientStreaming":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? [],
        observerFactory: self.clientStreaming(context:)
      )

    case "BidirectionalStreaming":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? [],
        observerFactory: self.BidirectionalStreaming(context:)
      )

    case "bidirectionalStreaming":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? [],
        observerFactory: self.bidirectionalStreaming(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Normalization_NormalizationAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Normalization_NormalizationServerInterceptorFactoryProtocol? { get }

  @Sendable func Unary(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Normalization_FunctionName

  @Sendable func unary(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Normalization_FunctionName

  @Sendable func ServerStreaming(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Normalization_FunctionName>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func serverStreaming(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Normalization_FunctionName>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func ClientStreaming(
    requestStream: GRPCAsyncRequestStream<SwiftProtobuf.Google_Protobuf_Empty>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Normalization_FunctionName

  @Sendable func clientStreaming(
    requestStream: GRPCAsyncRequestStream<SwiftProtobuf.Google_Protobuf_Empty>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Normalization_FunctionName

  @Sendable func BidirectionalStreaming(
    requestStream: GRPCAsyncRequestStream<SwiftProtobuf.Google_Protobuf_Empty>,
    responseStream: GRPCAsyncResponseStreamWriter<Normalization_FunctionName>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func bidirectionalStreaming(
    requestStream: GRPCAsyncRequestStream<SwiftProtobuf.Google_Protobuf_Empty>,
    responseStream: GRPCAsyncResponseStreamWriter<Normalization_FunctionName>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Normalization_NormalizationAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Normalization_NormalizationServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Normalization_NormalizationServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Normalization_NormalizationServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Unary":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeUnaryInterceptors() ?? [],
        wrapping: self.Unary(request:context:)
      )

    case "unary":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeunaryInterceptors() ?? [],
        wrapping: self.unary(request:context:)
      )

    case "ServerStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeServerStreamingInterceptors() ?? [],
        wrapping: self.ServerStreaming(request:responseStream:context:)
      )

    case "serverStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeserverStreamingInterceptors() ?? [],
        wrapping: self.serverStreaming(request:responseStream:context:)
      )

    case "ClientStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeClientStreamingInterceptors() ?? [],
        wrapping: self.ClientStreaming(requestStream:context:)
      )

    case "clientStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeclientStreamingInterceptors() ?? [],
        wrapping: self.clientStreaming(requestStream:context:)
      )

    case "BidirectionalStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makeBidirectionalStreamingInterceptors() ?? [],
        wrapping: self.BidirectionalStreaming(requestStream:responseStream:context:)
      )

    case "bidirectionalStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Normalization_FunctionName>(),
        interceptors: self.interceptors?.makebidirectionalStreamingInterceptors() ?? [],
        wrapping: self.bidirectionalStreaming(requestStream:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Normalization_NormalizationServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'Unary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnaryInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'unary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeunaryInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'ServerStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeServerStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'serverStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeserverStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'ClientStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'clientStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeclientStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'BidirectionalStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidirectionalStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]

  /// - Returns: Interceptors to use when handling 'bidirectionalStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makebidirectionalStreamingInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Normalization_FunctionName>]
}

internal enum Normalization_NormalizationServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Normalization",
    fullName: "normalization.Normalization",
    methods: [
      Normalization_NormalizationServerMetadata.Methods.Unary,
      Normalization_NormalizationServerMetadata.Methods.unary,
      Normalization_NormalizationServerMetadata.Methods.ServerStreaming,
      Normalization_NormalizationServerMetadata.Methods.serverStreaming,
      Normalization_NormalizationServerMetadata.Methods.ClientStreaming,
      Normalization_NormalizationServerMetadata.Methods.clientStreaming,
      Normalization_NormalizationServerMetadata.Methods.BidirectionalStreaming,
      Normalization_NormalizationServerMetadata.Methods.bidirectionalStreaming,
    ]
  )

  internal enum Methods {
    internal static let Unary = GRPCMethodDescriptor(
      name: "Unary",
      path: "/normalization.Normalization/Unary",
      type: GRPCCallType.unary
    )

    internal static let unary = GRPCMethodDescriptor(
      name: "unary",
      path: "/normalization.Normalization/unary",
      type: GRPCCallType.unary
    )

    internal static let ServerStreaming = GRPCMethodDescriptor(
      name: "ServerStreaming",
      path: "/normalization.Normalization/ServerStreaming",
      type: GRPCCallType.serverStreaming
    )

    internal static let serverStreaming = GRPCMethodDescriptor(
      name: "serverStreaming",
      path: "/normalization.Normalization/serverStreaming",
      type: GRPCCallType.serverStreaming
    )

    internal static let ClientStreaming = GRPCMethodDescriptor(
      name: "ClientStreaming",
      path: "/normalization.Normalization/ClientStreaming",
      type: GRPCCallType.clientStreaming
    )

    internal static let clientStreaming = GRPCMethodDescriptor(
      name: "clientStreaming",
      path: "/normalization.Normalization/clientStreaming",
      type: GRPCCallType.clientStreaming
    )

    internal static let BidirectionalStreaming = GRPCMethodDescriptor(
      name: "BidirectionalStreaming",
      path: "/normalization.Normalization/BidirectionalStreaming",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let bidirectionalStreaming = GRPCMethodDescriptor(
      name: "bidirectionalStreaming",
      path: "/normalization.Normalization/bidirectionalStreaming",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

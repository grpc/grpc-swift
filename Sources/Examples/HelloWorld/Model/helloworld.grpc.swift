//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: helloworld.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Helloworld_GreeterClient, then call methods of this protocol to make API calls.
public protocol Helloworld_GreeterClientProtocol: GRPCClient {
  var interceptors: Helloworld_GreeterClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloReply>
}

extension Helloworld_GreeterClientProtocol {

  /// Sends a greeting.
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sayHello(
    _ request: Helloworld_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Helloworld_HelloRequest, Helloworld_HelloReply> {
    return self.makeUnaryCall(
      path: "/helloworld.Greeter/SayHello",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

public protocol Helloworld_GreeterClientInterceptorFactoryProtocol {
  /// Makes an array of generic interceptors. The per-method interceptor
  /// factories default to calling this function and it therefore provides a
  /// convenient way of setting interceptors for all methods on a client.
  /// - Returns: An array of interceptors generic over `Request` and `Response`.
  ///   Defaults to an empty array.
  func makeInterceptors<Request: SwiftProtobuf.Message, Response: SwiftProtobuf.Message>() -> [ClientInterceptor<Request, Response>]

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ClientInterceptor<Helloworld_HelloRequest, Helloworld_HelloReply>]
}

extension Helloworld_GreeterClientInterceptorFactoryProtocol {
  public func makeInterceptors<Request: SwiftProtobuf.Message, Response: SwiftProtobuf.Message>() -> [ClientInterceptor<Request, Response>] {
    return []
  }

  public func makeSayHelloInterceptors() -> [ClientInterceptor<Helloworld_HelloRequest, Helloworld_HelloReply>] {
    return self.makeInterceptors()
  }
}

public final class Helloworld_GreeterClient: Helloworld_GreeterClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Helloworld_GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the helloworld.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Helloworld_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Helloworld_GreeterProvider: CallHandlerProvider {
  /// Sends a greeting.
  func sayHello(request: Helloworld_HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Helloworld_HelloReply>
}

extension Helloworld_GreeterProvider {
  public var serviceName: Substring { return "helloworld.Greeter" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SayHello":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sayHello(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


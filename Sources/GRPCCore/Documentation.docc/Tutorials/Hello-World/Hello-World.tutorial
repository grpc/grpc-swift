@Tutorial(time: 10) {
  @XcodeRequirement(
    title: "Xcode 16",
    destination: "https://developer.apple.com/download/"
  )

  @Intro(title: "Quick Start: Hello, World!") {
    This tutorial walks you through the canonical "Hello, World!" program for gRPC Swift. You'll
    learn how to implement a service using generated stubs, then you'll learn to configure and use
    a gRPC server. You'll also see how to create a client and use it to call the server.

    The tutorial assumes you are comfortable with both Swift and the basic concepts of gRPC. If you
    aren't then check out the Swift [Getting Started](https://www.swift.org/getting-started/) guide
    and the [gRPC website](https://grpc.io) for more information.

    You'll need a local copy of the example code to work through this tutorial. Download the example
    code from our GitHub repository if you haven't done so already. You can do this by cloning the
    repository by running the following command in a terminal:

    ```console
    git clone --branch 2.0.0 https://github.com/grpc/grpc-swift
    ```

    You then need to change directory to the `Examples/hello-world` directory of the cloned
    repository. The rest of the tutorial assumes this is the current working directory.
  }

  @Section(title: "Run a gRPC application") {
    Let's start by running the existing Greeter application.

    As a prerequisite you must have the Protocol Buffers compiler (`protoc`) installed. You can
    find the instructions for doing this in the [gRPC Swift Protobuf
    documentation](https://swiftpackageindex.com/grpc/grpc-swift-protobuf/documentation/grpcprotobuf/installing-protoc).
    The remainder of this tutorial assumes you installed `protoc` and it's available in
    your `$PATH`.

    You may notice that the `swift` commands are all prefixed with `PROTOC_PATH=$(which protoc)`,
    this is to let the build system know where `protoc` is located so that it can generate stubs
    for you. You can read more about it in the  [gRPC Swift Protobuf
    documentation](https://swiftpackageindex.com/grpc/grpc-swift-protobuf/documentation/grpcprotobuf/generating-stubs).

    @Steps {
      @Step {
        In a terminal run `PROTOC_PATH=$(which protoc) swift run hello-world serve` to start the
        server. By default it'll start listening on port 31415.

        @Code(name: "Console.txt", file: "hello-world-sec02-step01.txt")
      }

      @Step {
        In another terminal run `PROTOC_PATH=$(which protoc) swift run hello-world greet` to create
        a client, connect to the server you started and send it a request and print the response.

        @Code(name: "Console.txt", file: "hello-world-sec02-step02.txt")
      }

      @Step {
        Congratulations! You've just run a client-server application with gRPC Swift. You can now
        cancel the two running processes.
      }
    }
  }

  @Section(title: "Update a gRPC service") {
    Now let's look at how to update the application with an extra method on the server for the
    client to call. Our gRPC service is defined using protocol buffers; you can find out lots more
    about how to define a service in a `.proto` file in [What is gRPC?](https://grpc.io/docs/what-is-grpc/).
    For now all you need to know is that both the server and client "stub" have a `SayHello` RPC
    method that takes a `HelloRequest` parameter from the client and returns a `HelloReply` from
    the server.

    @Steps {
      @Step {
        Open `HelloWorld.proto` in to see how the service is defined.

        @Code(name: "HelloWorld.proto", file: "hello-world-sec03-step01.proto")
      }

      @Step {
        Let's update it so that the `Greeter` service has two methods. Add a  new `SayHelloAgain`
        method, with the same request and response types.

        @Code(name: "HelloWorld.proto", file: "hello-world-sec03-step02.proto")
      }
    }
  }

  @Section(title: "Update and run the application") {
    You need to regenerate the stubs as the service definition has changed. As you're using
    the Swift Package Manager Build Plugin for gRPC Swift the gRPC code is automatically
    generated if necessary when you build the example. You can learn more about generating stubs in
    the <doc:Generating-stubs> article.


    @Steps {
      @Step {
        Run `PROTOC_PATH=$(which protoc) swift build` to build the example. This will fail
        because the service no longer implements all of the methods declared in the `.proto` file.
        Let's fix that!
      }

      @Step {
        Open `Serve.swift` in the `Subcommands` directory.

        @Code(name: "Serve.swift", file: "hello-world-sec04-step01.swift")
      }

      @Step {
        Implement the new method like this:

        @Code(name: "Serve.swift", file: "hello-world-sec04-step02.swift")
      }

      @Step {
        Let's update the client now. Open `Greet.swift` in the `Subcommands` directory.

        @Code(name: "Greet.swift", file: "hello-world-sec04-step03.swift")
      }

      @Step {
        Add a call to the `sayHelloAgain` method:

        @Code(name: "Greet.swift", file: "hello-world-sec04-step04.swift")
      }

      @Step {
        Just like we did before, open a terminal and start the server by
        running `PROTOC_PATH=$(which protoc) swift run hello-world serve`

        @Code(name: "Console.txt", file: "hello-world-sec04-step05.txt")
      }

      @Step {
        In a separate terminal run `PROTOC_PATH=$(which protoc) swift run hello-world greet` to
        call the server.

        @Code(name: "Console.txt", file: "hello-world-sec04-step06.txt")
      }
    }
  }
}

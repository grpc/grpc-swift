/*
 * Copyright 2024, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Foundation
import SwiftProtobuf
import SwiftProtobufPluginLibrary

import struct GRPCCodeGen.CodeGenerationRequest

/// Parses a ``FileDescriptor`` object into a ``CodeGenerationRequest`` object.
public struct InputParser {
  public init() {}
  public func parse(input: FileDescriptor) throws -> CodeGenerationRequest {
    let fileName = input.name
    let package = input.package
    var header = String()
    // Field number used to collect the .proto file header.
    let headerPath = IndexPath(index: 12)
    if let headerLocation = input.sourceCodeInfoLocation(path: headerPath) {
      header = headerLocation.asSourceComment(
        commentPrefix: "///",
        leadingDetachedPrefix: "//"
      )
      // If the was a leading or tailing comment it won't have a blank
      // line, after it, so ensure there is one.
      if !header.isEmpty && !header.hasSuffix("\n\n") {
        header.append("\n")
      }
    }
    let leadingTrivia = """
      // DO NOT EDIT.
      // swift-format-ignore-file
      //
      // Generated by the Swift generator plugin for the protocol buffer compiler.
      // Source: \(fileName)
      //
      // For information on using the generated types, please see the documentation:
      //   https://github.com/apple/swift-protobuf/\n\n
      """
    let dependencies = input.dependencies.map {
      CodeGenerationRequest.Dependency(module: $0.name)
    }
    let lookupSerializer: (String) -> String = { messageType in
      "ProtobufSerializer<\(messageType)>()"
    }
    let lookupDeserializer: (String) -> String = { messageType in
      "ProtobufDeserializer<\(messageType)>()"
    }
    let services = createCodeGenerationServices(from: input.services, in: package)

    return CodeGenerationRequest(
      fileName: fileName,
      leadingTrivia: leadingTrivia + header,
      dependencies: dependencies,
      services: services,
      lookupSerializer: lookupSerializer,
      lookupDeserializer: lookupDeserializer
    )
  }

  fileprivate func createCodeGenerationServices(
    from protoServices: [ServiceDescriptor],
    in package: String
  ) -> [CodeGenerationRequest.ServiceDescriptor] {
    var codeGenServices = [CodeGenerationRequest.ServiceDescriptor]()
    for protoService in protoServices {
      var methods = [CodeGenerationRequest.ServiceDescriptor.MethodDescriptor]()
      for protoMethod in protoService.methods {
        let name = CodeGenerationRequest.Name(
          base: protoMethod.name,
          generatedUpperCase: NamingUtils.toUpperCamelCase(protoMethod.name),
          generatedLowerCase: NamingUtils.toLowerCamelCase(protoMethod.name)
        )
        let documentation = protoMethod.protoSourceComments()
        methods.append(
          CodeGenerationRequest.ServiceDescriptor.MethodDescriptor(
            documentation: documentation,
            name: name,
            isInputStreaming: protoMethod.clientStreaming,
            isOutputStreaming: protoMethod.serverStreaming,
            inputType: protoMethod.inputType.name,
            outputType: protoMethod.outputType.name
          )
        )
      }
      let name = CodeGenerationRequest.Name(
        base: protoService.name,
        generatedUpperCase: NamingUtils.toUpperCamelCase(protoService.name),
        generatedLowerCase: NamingUtils.toLowerCamelCase(protoService.name)
      )
      let namespace = CodeGenerationRequest.Name(
        base: package,
        generatedUpperCase: NamingUtils.toUpperCamelCase(package),
        generatedLowerCase: NamingUtils.toLowerCamelCase(package)
      )
      let documentation = protoService.protoSourceComments()
      codeGenServices.append(
        CodeGenerationRequest.ServiceDescriptor(
          documentation: documentation,
          name: name,
          namespace: namespace,
          methods: methods
        )
      )
    }

    return codeGenServices
  }
}
